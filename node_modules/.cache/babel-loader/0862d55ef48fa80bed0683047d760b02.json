{"ast":null,"code":"import { ApplicationSettings } from \"../configuration/application-settings\";\nimport { AuthenticationService } from \"../login/authentication/authentication-service\";\nexport class HttpClient {\n  static async post(resource, body) {\n    const headers = HttpClient.GetHeaders();\n    var requestOptions = {\n      method: 'POST',\n      body: body,\n      redirect: 'follow',\n      headers: headers\n    };\n    var url = ApplicationSettings.API_URL + resource;\n    const response = await fetch(url, requestOptions);\n\n    if (response.status === 200) {\n      return Promise.resolve(response);\n    } else {\n      return Promise.reject(new Error(response.statusText));\n    }\n  }\n\n  static async postForm(resource, body) {\n    const headers = HttpClient.GetHeaders(null);\n    var requestOptions = {\n      method: 'POST',\n      body: body,\n      redirect: 'follow',\n      headers: headers\n    };\n    var url = ApplicationSettings.API_URL + resource;\n    const response = await fetch(url, requestOptions);\n\n    if (response.status === 200) {\n      return Promise.resolve(response.json());\n    } else {\n      return Promise.reject(new Error(response.statusText));\n    }\n  }\n\n  static async patch(resource, body) {\n    const headers = HttpClient.GetHeaders();\n    var requestOptions = {\n      method: 'PATCH',\n      body: body,\n      redirect: 'follow',\n      headers: headers\n    };\n    var url = ApplicationSettings.API_URL + resource;\n    const response = await fetch(url, requestOptions);\n\n    if (response.status === 200) {\n      if (response.bodyUsed) {\n        return Promise.resolve(response.json());\n      } else {\n        return response;\n      }\n    } else {\n      return Promise.reject(new Error(response.statusText));\n    }\n  }\n\n  static async get(resource) {\n    const headers = HttpClient.GetHeaders();\n    var requestOptions = {\n      method: 'GET',\n      redirect: 'follow',\n      headers: headers\n    };\n    var url = ApplicationSettings.API_URL + resource;\n    const response = await fetch(url, requestOptions);\n\n    if (response.status === 200) {\n      return Promise.resolve(response.json());\n    }\n\n    if (response.status === 204) {\n      return Promise.resolve(response.json());\n    } else {\n      return Promise.reject(new Error(response.statusText));\n    }\n  }\n\n  static GetHeaders(contentType = 'application/json') {\n    var token = AuthenticationService.getAccessToken();\n    let headers = {};\n\n    if (token != null) {\n      headers['Authorization'] = 'Bearer ' + token;\n    }\n\n    if (contentType != null) {\n      headers['Content-Type'] = contentType;\n    }\n\n    return headers;\n  }\n\n}","map":{"version":3,"sources":["/root/modular-monolith-with-ddd-fe-react/src/shared/http-client.tsx"],"names":["ApplicationSettings","AuthenticationService","HttpClient","post","resource","body","headers","GetHeaders","requestOptions","method","redirect","url","API_URL","response","fetch","status","Promise","resolve","reject","Error","statusText","postForm","json","patch","bodyUsed","get","contentType","token","getAccessToken"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,uCAApC;AACA,SAASC,qBAAT,QAAsC,gDAAtC;AAEA,OAAO,MAAMC,UAAN,CAAiB;AACpB,eAAoBC,IAApB,CAAkCC,QAAlC,EAAoDC,IAApD,EAAoF;AAEhF,UAAMC,OAAO,GAAGJ,UAAU,CAACK,UAAX,EAAhB;AACA,QAAIC,cAA2B,GAAG;AAC9BC,MAAAA,MAAM,EAAE,MADsB;AAE9BJ,MAAAA,IAAI,EAAEA,IAFwB;AAG9BK,MAAAA,QAAQ,EAAE,QAHoB;AAI9BJ,MAAAA,OAAO,EAAEA;AAJqB,KAAlC;AAOA,QAAIK,GAAG,GAAGX,mBAAmB,CAACY,OAApB,GAA8BR,QAAxC;AAEA,UAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMH,cAAN,CAA5B;;AACA,QAAIK,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,QAAhB,CAAP;AACH,KAFD,MAGK;AACD,aAAOG,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAf,CAAP;AACH;AACJ;;AAED,eAAoBC,QAApB,CAAsCjB,QAAtC,EAAwDC,IAAxD,EAA0F;AAEtF,UAAMC,OAAO,GAAGJ,UAAU,CAACK,UAAX,CAAsB,IAAtB,CAAhB;AACA,QAAIC,cAA2B,GAAG;AAC9BC,MAAAA,MAAM,EAAE,MADsB;AAE9BJ,MAAAA,IAAI,EAAEA,IAFwB;AAG9BK,MAAAA,QAAQ,EAAE,QAHoB;AAI9BJ,MAAAA,OAAO,EAAEA;AAJqB,KAAlC;AAOA,QAAIK,GAAG,GAAGX,mBAAmB,CAACY,OAApB,GAA8BR,QAAxC;AAEA,UAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMH,cAAN,CAA5B;;AACA,QAAIK,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,QAAQ,CAACS,IAAT,EAAhB,CAAP;AACH,KAFD,MAGK;AACD,aAAON,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAf,CAAP;AACH;AACJ;;AAED,eAAoBG,KAApB,CAAmCnB,QAAnC,EAAqDC,IAArD,EAA4F;AACxF,UAAMC,OAAO,GAAGJ,UAAU,CAACK,UAAX,EAAhB;AACA,QAAIC,cAA2B,GAAG;AAC9BC,MAAAA,MAAM,EAAE,OADsB;AAE9BJ,MAAAA,IAAI,EAAEA,IAFwB;AAG9BK,MAAAA,QAAQ,EAAE,QAHoB;AAI9BJ,MAAAA,OAAO,EAAEA;AAJqB,KAAlC;AAOA,QAAIK,GAAG,GAAGX,mBAAmB,CAACY,OAApB,GAA8BR,QAAxC;AAEA,UAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMH,cAAN,CAA5B;;AACA,QAAIK,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,UAAIF,QAAQ,CAACW,QAAb,EAAuB;AACnB,eAAOR,OAAO,CAACC,OAAR,CAAgBJ,QAAQ,CAACS,IAAT,EAAhB,CAAP;AACH,OAFD,MAGK;AACD,eAAOT,QAAP;AACH;AAEJ,KARD,MASK;AACD,aAAOG,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAf,CAAP;AACH;AACJ;;AAID,eAAoBK,GAApB,CAAiCrB,QAAjC,EAAqE;AACjE,UAAME,OAAO,GAAGJ,UAAU,CAACK,UAAX,EAAhB;AACA,QAAIC,cAA2B,GAAG;AAC9BC,MAAAA,MAAM,EAAE,KADsB;AAE9BC,MAAAA,QAAQ,EAAE,QAFoB;AAG9BJ,MAAAA,OAAO,EAAEA;AAHqB,KAAlC;AAMA,QAAIK,GAAG,GAAGX,mBAAmB,CAACY,OAApB,GAA8BR,QAAxC;AAEA,UAAMS,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAMH,cAAN,CAA5B;;AACA,QAAIK,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,QAAQ,CAACS,IAAT,EAAhB,CAAP;AACH;;AAED,QAAIT,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAOC,OAAO,CAACC,OAAR,CAAgBJ,QAAQ,CAACS,IAAT,EAAhB,CAAP;AACH,KAFD,MAGK;AACD,aAAON,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAf,CAAP;AACH;AACJ;;AAED,SAAeb,UAAf,CAA0BmB,WAA0B,GAAG,kBAAvD,EAAmG;AAC/F,QAAIC,KAAK,GAAG1B,qBAAqB,CAAC2B,cAAtB,EAAZ;AAEA,QAAItB,OAA+B,GAAG,EAAtC;;AAEA,QAAIqB,KAAK,IAAI,IAAb,EAAmB;AACfrB,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,YAAYqB,KAAvC;AACH;;AAED,QAAID,WAAW,IAAI,IAAnB,EAAyB;AACrBpB,MAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BoB,WAA1B;AACH;;AAED,WAAOpB,OAAP;AACH;;AA5GmB","sourcesContent":["import { ApplicationSettings } from \"../configuration/application-settings\";\nimport { AuthenticationService } from \"../login/authentication/authentication-service\";\n\nexport class HttpClient {\n    public static async post<TResult>(resource: string, body: string): Promise<TResult> {\n\n        const headers = HttpClient.GetHeaders();\n        var requestOptions: RequestInit = {\n            method: 'POST',\n            body: body,\n            redirect: 'follow',\n            headers: headers\n        };\n\n        var url = ApplicationSettings.API_URL + resource;\n\n        const response = await fetch(url, requestOptions);\n        if (response.status === 200) {\n            return Promise.resolve(response as any);\n        }\n        else {\n            return Promise.reject(new Error(response.statusText));\n        }\n    }\n\n    public static async postForm<TResult>(resource: string, body: FormData): Promise<TResult> {\n\n        const headers = HttpClient.GetHeaders(null);\n        var requestOptions: RequestInit = {\n            method: 'POST',\n            body: body,\n            redirect: 'follow',\n            headers: headers\n        };\n\n        var url = ApplicationSettings.API_URL + resource;\n\n        const response = await fetch(url, requestOptions);\n        if (response.status === 200) {\n            return Promise.resolve(response.json());\n        }\n        else {\n            return Promise.reject(new Error(response.statusText));\n        }\n    }\n\n    public static async patch<TResult>(resource: string, body: string | null): Promise<TResult> {\n        const headers = HttpClient.GetHeaders();\n        var requestOptions: RequestInit = {\n            method: 'PATCH',\n            body: body,\n            redirect: 'follow',\n            headers: headers\n        };\n\n        var url = ApplicationSettings.API_URL + resource;\n\n        const response = await fetch(url, requestOptions);\n        if (response.status === 200) {\n            if (response.bodyUsed) {\n                return Promise.resolve(response.json());\n            }\n            else {\n                return response as any;\n            }\n\n        }\n        else {\n            return Promise.reject(new Error(response.statusText));\n        }\n    }\n\n\n\n    public static async get<TResult>(resource: string): Promise<TResult> {\n        const headers = HttpClient.GetHeaders();\n        var requestOptions: RequestInit = {\n            method: 'GET',\n            redirect: 'follow',\n            headers: headers\n        };\n\n        var url = ApplicationSettings.API_URL + resource;\n\n        const response = await fetch(url, requestOptions);\n        if (response.status === 200) {\n            return Promise.resolve(response.json());\n        }\n\n        if (response.status === 204) {\n            return Promise.resolve(response.json());\n        }\n        else {\n            return Promise.reject(new Error(response.statusText));\n        }\n    }\n\n    private static GetHeaders(contentType: null | string = 'application/json'): Record<string, string> {\n        var token = AuthenticationService.getAccessToken();\n\n        let headers: Record<string, string> = {};\n\n        if (token != null) {\n            headers['Authorization'] = 'Bearer ' + token;\n        }\n\n        if (contentType != null) {\n            headers['Content-Type'] = contentType;\n        }\n\n        return headers;\n    }\n}"]},"metadata":{},"sourceType":"module"}